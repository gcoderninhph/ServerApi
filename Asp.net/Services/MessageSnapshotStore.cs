using System.Collections.Concurrent;

namespace Asp.net.Services;

/// <summary>
/// In-memory store ƒë·ªÉ l∆∞u snapshots c·ªßa messages
/// Thread-safe v·ªõi ConcurrentDictionary
/// </summary>
public class MessageSnapshotStore
{
    private readonly ConcurrentDictionary<string, MessageSnapshot> _snapshots = new();
    private readonly ILogger<MessageSnapshotStore> _logger;

    public MessageSnapshotStore(ILogger<MessageSnapshotStore> logger)
    {
        _logger = logger;
    }

    /// <summary>
    /// Th√™m ho·∫∑c c·∫≠p nh·∫≠t snapshot
    /// </summary>
    public void AddOrUpdate(MessageSnapshot snapshot)
    {
        _snapshots.AddOrUpdate(snapshot.Id, snapshot, (key, existing) => snapshot);
        _logger.LogInformation("üì∏ Snapshot updated: {Id} - {Command} - {Status}", 
            snapshot.Id, snapshot.Command, snapshot.Status);
    }

    /// <summary>
    /// C·∫≠p nh·∫≠t status c·ªßa m·ªôt message
    /// </summary>
    public void UpdateStatus(string messageId, MessageStatus status, string? errorMessage = null)
    {
        if (_snapshots.TryGetValue(messageId, out var snapshot))
        {
            snapshot.Status = status;
            snapshot.ErrorMessage = errorMessage;
            _logger.LogInformation("üì∏ Status updated: {Id} -> {Status}", messageId, status);
        }
    }

    /// <summary>
    /// L·∫•y t·∫•t c·∫£ snapshots (s·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t)
    /// </summary>
    public List<MessageSnapshot> GetAll()
    {
        return _snapshots.Values
            .OrderByDescending(s => s.Timestamp)
            .ToList();
    }

    /// <summary>
    /// L·∫•y snapshot theo ID
    /// </summary>
    public MessageSnapshot? GetById(string id)
    {
        _snapshots.TryGetValue(id, out var snapshot);
        return snapshot;
    }

    /// <summary>
    /// X√≥a snapshot
    /// </summary>
    public void Remove(string id)
    {
        if (_snapshots.TryRemove(id, out var snapshot))
        {
            _logger.LogInformation("üì∏ Snapshot removed: {Id}", id);
        }
    }

    /// <summary>
    /// X√≥a t·∫•t c·∫£ snapshots
    /// </summary>
    public void Clear()
    {
        _snapshots.Clear();
        _logger.LogInformation("üì∏ All snapshots cleared");
    }

    /// <summary>
    /// ƒê·∫øm s·ªë l∆∞·ª£ng snapshots
    /// </summary>
    public int Count => _snapshots.Count;
}
